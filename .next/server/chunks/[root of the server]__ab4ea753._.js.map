{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/Ai-Translator/src/app/api/voice/route.js"],"sourcesContent":["import { ElevenLabsClient } from \"elevenlabs\";\nimport { NextResponse } from \"next/server\";\nimport { Readable } from \"stream\";\n\nconst client = new ElevenLabsClient({\n  apiKey: process.env.ELEVEN_LABS_KEY,\n});\n\nexport async function POST(request) {\n  try {\n    const { transcript } = await request.json();\n\n    if (!transcript) {\n      return NextResponse.json(\n        { error: \"Missing transcript in request body.\" },\n        { status: 400 }\n      );\n    }\n\n    // Set the desired voice ID.\n    const voiceId = \"9Ats6C5UrhVXzgyVbnh3\";\n    // Call the ElevenLabs API to stream the generated audio.\n    // Note: The official docs require `text` and `model_id`. The \"voice\" property is optional.\n    const audioStream = await client.textToSpeech.convertAsStream(voiceId, {\n      text: transcript,\n      model_id: \"eleven_multilingual_v2\",\n    });\n\n    // Convert the async iterator to a Node.js Readable stream.\n    const readableStream = Readable.from(audioStream);\n\n    return new Response(readableStream, {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"audio/mpeg\",\n        \"Content-Disposition\": \"attachment; filename=output.mp3\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Error generating audio:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,qIAAA,CAAA,mBAAgB,CAAC;IAClC,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEzC,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,4BAA4B;QAC5B,MAAM,UAAU;QAChB,yDAAyD;QACzD,2FAA2F;QAC3F,MAAM,cAAc,MAAM,OAAO,YAAY,CAAC,eAAe,CAAC,SAAS;YACrE,MAAM;YACN,UAAU;QACZ;QAEA,2DAA2D;QAC3D,MAAM,iBAAiB,qGAAA,CAAA,WAAQ,CAAC,IAAI,CAAC;QAErC,OAAO,IAAI,SAAS,gBAAgB;YAClC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB;YACzB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}