{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/Ai-Translator/src/app/api/voice/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { ElevenLabsClient } from \"elevenlabs\";\nimport { Readable } from \"stream\";\n\nexport async function POST(request) {\n  try {\n    const { transcript } = await request.json();\n\n    if (!transcript) {\n      return NextResponse.json(\n        { error: \"Missing transcript in request body.\" },\n        { status: 400 }\n      );\n    }\n\n    const apiKey = process.env.ELEVEN_LABS_KEY;\n    if (!apiKey) {\n      return NextResponse.json(\n        { error: \"Missing ELEVEN_LABS_KEY environment variable.\" },\n        { status: 500 }\n      );\n    }\n\n    const client = new ElevenLabsClient({ apiKey });\n\n    // Call the streaming API via the SDK.\n    // Note: convertAsStream returns an async iterator over audio bytes.\n    const audioIterator = await client.textToSpeech.convertAsStream(\n      \"9Ats6C5UrhVXzgyVbnh3\",\n      {\n        output_format: \"mp3_44100_128\",\n        text: transcript,\n        model_id: \"eleven_multilingual_v2\",\n      }\n    );\n\n    // Convert the async iterator into a Node.js Readable stream.\n    const readableStream = Readable.from(audioIterator);\n\n    // Forward the streaming response directly to the client.\n    return new Response(readableStream, {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"audio/mpeg\",\n        \"Content-Disposition\": \"attachment; filename=output.mp3\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Internal error in /api/voice:\", error);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEzC,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,eAAe;QAC1C,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgD,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,IAAI,qIAAA,CAAA,mBAAgB,CAAC;YAAE;QAAO;QAE7C,sCAAsC;QACtC,oEAAoE;QACpE,MAAM,gBAAgB,MAAM,OAAO,YAAY,CAAC,eAAe,CAC7D,wBACA;YACE,eAAe;YACf,MAAM;YACN,UAAU;QACZ;QAGF,6DAA6D;QAC7D,MAAM,iBAAiB,qGAAA,CAAA,WAAQ,CAAC,IAAI,CAAC;QAErC,yDAAyD;QACzD,OAAO,IAAI,SAAS,gBAAgB;YAClC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB;YACzB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}